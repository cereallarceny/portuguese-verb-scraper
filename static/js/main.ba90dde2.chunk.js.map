{"version":3,"sources":["Card.js","App.js","serviceWorker.js","index.js"],"names":["cardStyles","width","height","background","borderRadius","marginBottom","cursor","sideStyles","display","flexDirection","justifyContent","alignItems","card","props","flipDirections","style","marginTop","verb","mode","conjugations","map","i","pronoun","conjugation","key","fontWeight","containerStyles","position","top","left","transform","cardsRemainingContainerStyles","cardsRemainingStyles","flexGrow","flexBasis","textAlign","buttonContainerStyles","buttonStyles","marginLeft","marginRight","border","moveCardToDeck","from","to","index","newFromArray","filter","_","newToArray","oldFrom","newFrom","oldTo","newTo","formatCardsRemaining","count","Boolean","window","location","hostname","match","ReactDOM","render","shuffledCards","array","length","j","Math","floor","random","temp","shuffle","verbs","forEach","types","type","modes","push","name","getCardsFromVerbs","regularVerbs","irregularVerbs","useState","deck","setDeck","currentDeck","setCurrentDeck","goodDeck","setGoodDeck","badDeck","setBadDeck","skipDeck","setSkipDeck","currentFlipped","setCurrentFlipped","drawCard","unflip","a","Promise","r","setTimeout","setGood","setBad","setSkip","useEffect","onClick","Card","isFlipped","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ba90dde2.chunk.js","sourcesContent":["import React from 'react';\nimport Flippy, { FrontSide, BackSide } from 'react-flippy';\n\nconst cardStyles = {\n  width: 420,\n  height: 280,\n  background: 'white',\n  borderRadius: 4,\n  marginBottom: 20,\n  cursor: 'pointer'\n};\n\nconst sideStyles = {\n  borderRadius: 4,\n  display: 'flex',\n  flexDirection: 'column',\n  justifyContent: 'center',\n  alignItems: 'center'\n};\n\nexport default ({ card, ...props }) => (\n  <Flippy flipDirections=\"horizontal\" style={cardStyles} {...props}>\n    <FrontSide style={sideStyles}>\n      <h1 style={{ marginTop: 0 }}>{card.verb}</h1>\n      <h3 style={{ marginBottom: 0 }}>{card.mode}</h3>\n    </FrontSide>\n    <BackSide style={sideStyles}>\n      {card.conjugations.map(({ pronoun, conjugation }, i) => (\n        <p key={i}>\n          {pronoun} <span style={{ fontWeight: 'bold' }}>{conjugation}</span>\n        </p>\n      ))}\n    </BackSide>\n  </Flippy>\n);\n","import React, { useState, useEffect } from 'react';\nimport Card from './Card';\n\nimport regularVerbs from './data/regular-verbs.json';\nimport irregularVerbs from './data/irregular-verbs.json';\n\nconst containerStyles = {\n  width: 600,\n  height: 600,\n  position: 'absolute',\n  top: '50%',\n  left: '50%',\n  transform: 'translate(-50%, -50%)',\n  display: 'flex',\n  flexDirection: 'column',\n  justifyContent: 'center',\n  alignItems: 'center'\n};\n\nconst cardsRemainingContainerStyles = {\n  display: 'flex',\n  width: '100%',\n  marginBottom: 40\n};\n\nconst cardsRemainingStyles = {\n  flexGrow: 1,\n  flexBasis: 0,\n  textAlign: 'center'\n};\n\nconst buttonContainerStyles = cardsRemainingContainerStyles;\n\nconst buttonStyles = {\n  flexGrow: 1,\n  flexBasis: 0,\n  marginLeft: 10,\n  marginRight: 10,\n  height: 30,\n  background: 'aliceblue',\n  border: 'none',\n  cursor: 'pointer',\n  fontWeight: 'bold',\n  borderRadius: 4\n};\n\nconst shuffle = array => {\n  for (let i = array.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * i);\n    const temp = array[i];\n    array[i] = array[j];\n    array[j] = temp;\n  }\n\n  return array;\n};\n\nconst getCardsFromVerbs = verbs => {\n  const temp = [];\n\n  verbs.forEach(verb => {\n    verb.types.forEach(type => {\n      type.modes.forEach(mode => {\n        temp.push({\n          mode: mode.name,\n          conjugations: mode.conjugations,\n          verb: verb.name,\n          type: type.name\n        });\n      });\n    });\n  });\n\n  return temp;\n};\n\nconst moveCardToDeck = (from, to, index = 0) => {\n  const card = from[index];\n  const newFromArray = from.filter((_, i) => i !== index);\n  const newToArray = [...to, card];\n\n  return {\n    oldFrom: from,\n    newFrom: newFromArray,\n    oldTo: to,\n    newTo: newToArray\n  };\n};\n\nconst formatCardsRemaining = count =>\n  count === 1 ? '1 card' : `${count} cards`;\n\nexport default () => {\n  const verbs = [...regularVerbs, ...irregularVerbs];\n  const cards = getCardsFromVerbs(verbs);\n  const shuffledCards = shuffle(cards);\n\n  const [deck, setDeck] = useState(shuffledCards);\n  const [currentDeck, setCurrentDeck] = useState([]);\n  const [goodDeck, setGoodDeck] = useState([]);\n  const [badDeck, setBadDeck] = useState([]);\n  const [skipDeck, setSkipDeck] = useState([]);\n  const [currentFlipped, setCurrentFlipped] = useState(false);\n\n  const drawCard = () => {\n    const { newFrom, newTo } = moveCardToDeck(deck, currentDeck);\n\n    setDeck(newFrom);\n    setCurrentDeck([newTo[newTo.length - 1]]);\n  };\n\n  const unflip = async () => {\n    if (currentFlipped) {\n      setCurrentFlipped(false);\n\n      await new Promise(r => setTimeout(r, 1000));\n    }\n  };\n\n  const setGood = async () => {\n    const { newFrom, newTo } = moveCardToDeck(currentDeck, goodDeck);\n\n    await unflip();\n    setCurrentDeck(newFrom);\n    setGoodDeck(newTo);\n    drawCard();\n  };\n\n  const setBad = async () => {\n    const { newFrom, newTo } = moveCardToDeck(currentDeck, badDeck);\n\n    await unflip();\n    setCurrentDeck(newFrom);\n    setBadDeck(newTo);\n    drawCard();\n  };\n\n  const setSkip = async () => {\n    const { newFrom, newTo } = moveCardToDeck(currentDeck, skipDeck);\n\n    await unflip();\n    setCurrentDeck(newFrom);\n    setSkipDeck(newTo);\n    drawCard();\n  };\n\n  useEffect(() => {\n    drawCard();\n  }, []);\n\n  if (process.env.NODE_ENV === 'development') {\n    console.log('Deck', deck.length);\n    console.log('Current', currentDeck.length);\n    console.log('Good', goodDeck.length);\n    console.log('Bad', badDeck.length);\n    console.log('Skip', skipDeck.length);\n    console.log('-----');\n  }\n\n  return (\n    <div style={containerStyles}>\n      <div style={cardsRemainingContainerStyles}>\n        <span style={cardsRemainingStyles}>\n          {formatCardsRemaining(goodDeck.length)}\n        </span>\n        <span style={cardsRemainingStyles}>\n          {formatCardsRemaining(badDeck.length)}\n        </span>\n        <span style={cardsRemainingStyles}>\n          {formatCardsRemaining(skipDeck.length)}\n        </span>\n      </div>\n      <div style={buttonContainerStyles}>\n        <button style={buttonStyles} onClick={setGood}>\n          Move to Good\n        </button>\n        <button style={buttonStyles} onClick={setBad}>\n          Move to Bad\n        </button>\n        <button style={buttonStyles} onClick={setSkip}>\n          Move to Skip\n        </button>\n      </div>\n      {currentDeck.map((card, i) => (\n        <div onClick={() => setCurrentFlipped(!currentFlipped)}>\n          <Card card={card} isFlipped={currentFlipped} key={i} />\n        </div>\n      ))}\n    </div>\n  );\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}